{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAOA,SAASC,EAAcC,EAAUC,GAE/B,OAAqB,IAAIC,SAAQ,SAACC,EAASC,GACzCC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,uBAAwCK,OAAfR,EAAS,QAAYQ,OAANP,EAAM,OAEpDG,EAAK,sBAAqCI,OAAfR,EAAS,QAAYQ,OAANP,EAAM,M,GAEnDA,E,IAuBP,SAASQ,EAAiBC,EAAWC,GAC/BD,EACFb,EAAAe,OAAOC,QAAQF,GAEfd,EAAAe,OAAOE,QAAQH,E,EA1CN,CACXI,KAAMC,SAASC,cAAc,SAC7BC,UAAWF,SAASC,cAAc,YA+E/BF,KAAKI,iBAAiB,UAjCN,SAAAC,GACnBA,EAAMC,iBAaN,IAXA,IAEuBC,EAAnBF,EAAMG,cADRC,SAAYvB,EAAKqB,EAALrB,MAAOwB,EAAIH,EAAJG,KAAMC,EAAMJ,EAANI,OAGrBC,EAAmBC,OAAOF,EAAOG,OACjCC,EAAaF,OAAO3B,EAAM4B,OAC1BE,EAAmBH,OAAOH,EAAKI,OAK5BG,EAAI,EAAGA,GAAKL,EAAkBK,GAAK,EAO1CjC,EAAciC,EANJ,IAANA,EACeF,EAEAA,GAAcE,EAAI,GAAKD,GAIvCE,MAAK,SAAAJ,GAEJpB,GAAiB,EAAMoB,E,IAExBK,OAAM,SAAAC,GAEL1B,GAAiB,EAAO0B,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  submitBtn: document.querySelector('button'),\n};\n\nfunction createPromise(position, delay) {\n  let newPromise;\n  return (newPromise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  }));\n}\n\n// Function to markup messages html\n\n// function markupMessage(number, message, color) {\n//   const promiseMessage = document.createElement('div');\n//   markupOfPromiseMessage = `<div data-position=\"${number}\">${message}</div>`;\n//   refs.form.insertAdjacentHTML('beforeend', markupOfPromiseMessage);\n//   const messageBox = document.querySelector(`div[data-position=\"${number}\"`);\n\n//   messageBox.style.backgroundColor = color;\n//   messageBox.style.color = 'white';\n//   messageBox.style.width = '270px';\n//   messageBox.style.height = '25px';\n//   messageBox.style.borderRadius = '5px';\n//   messageBox.style.marginTop = '10px';\n//   messageBox.style.textAlign = 'center';\n// }\n\n// Function to make messages with Notiflix\n\nfunction makeNotification(isSuccess, message) {\n  if (isSuccess) {\n    Notify.success(message);\n  } else {\n    Notify.failure(message);\n  }\n}\n\n// Function to handle submit event\n\nconst handleSubmit = event => {\n  event.preventDefault();\n\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n\n  const numberOfPromises = Number(amount.value);\n  const firstDelay = Number(delay.value);\n  const stepOfNextDelays = Number(step.value);\n\n  let delayOfPromise = 0;\n  let markupOfPromiseMessage = '';\n\n  for (let i = 1; i <= numberOfPromises; i += 1) {\n    if (i === 1) {\n      delayOfPromise = firstDelay;\n    } else {\n      delayOfPromise = firstDelay + (i - 1) * stepOfNextDelays;\n    }\n\n    createPromise(i, delayOfPromise)\n      .then(value => {\n        // markupMessage(i, value, 'green');\n        makeNotification(true, value);\n      })\n      .catch(error => {\n        // markupMessage(i, error, 'red');\n        makeNotification(false, error);\n      });\n  }\n};\n\nrefs.form.addEventListener('submit', handleSubmit);\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","concat","$ce04d3a99e08e73b$var$makeNotification","isSuccess","message","Notify","success","failure","form","document","querySelector","submitBtn","addEventListener","event","preventDefault","_elements","currentTarget","elements","step","amount","numberOfPromises","Number","value","firstDelay","stepOfNextDelays","i","then","catch","error"],"version":3,"file":"03-promises.4c2055b7.js.map"}